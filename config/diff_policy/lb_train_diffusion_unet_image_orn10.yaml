# defaults:
  # - _self_
  # - task: lift_image_abs

# name: train_diffusion_unet_image
# _target_: diffusion_policy.workspace.train_diffusion_unet_image_workspace.TrainDiffusionUnetImageWorkspace

# task_name: ${task.name}
# shape_meta: ${task.shape_meta}
image_shape: &image_shape [3, 128, 128]
shape_meta: &shape_meta
  # acceptable types: rgb, low_dim
  obs:
    img_obs_1:
      shape: *image_shape
      minmax_shape: ${image_minmax_01:}
      type: rgb
    img_goal_1:
      shape: *image_shape
      minmax_shape: ${image_minmax_01:}
      type: rgb
    # agent_pos:
    #   shape: [4]
    #   type: low_dim
  action:
    shape: [7]
    minmax_shape: ${lb_action_minmax:}

# exp_name: "default"

horizon: 16 # some of these can be overwrited
n_obs_steps: 1
n_action_steps: 8
# n_latency_steps: 0
# dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
# keypoint_visible_rate: 1.0
obs_as_global_cond: True

policy:
  _target_: diffuser.diffusion_policy.diffusion_unet_image_policy.DiffusionUnetImagePolicy

  shape_meta: *shape_meta
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  obs_encoder:
    _target_: diffuser.diffusion_policy.model.multi_image_obs_encoder.MultiImageObsEncoder
    shape_meta: *shape_meta

    rgb_model:
      # visual_core:
      _target_: diffuser.diffusion_policy.common.vision_nets.VisualCore
      input_shape: *image_shape
      backbone_class: ResNet18Conv
      backbone_kwargs: 
        pretrained: null
        input_coord_conv: False
      pool_class: SpatialSoftmax
      pool_kwargs:
        num_kp: 32
        learnable_temperature: False
        temperature: 1.0
        noise_std: 0.0
        output_variance: False
      flatten: True
      feature_dimension: 64

      # _target_: diffusion_policy.model.vision.model_getter.get_resnet
      # name: resnet18
      # weights: null
    resize_shape: null
    crop_shape: null # [76, 76]
    # constant center crop
    random_crop: null # True
    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: False # True

  horizon: ${horizon}
  n_action_steps: ${n_action_steps} # ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [256, 512, 1024] # [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True


  noise_scheduler_ddim:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2
    clip_sample: True # below four are also default params
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: epsilon
  num_inference_steps_ddim: 8





